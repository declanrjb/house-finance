{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var e = {\n      d: function d(o, n) {\n        for (var t in n) {\n          e.o(n, t) && !e.o(o, t) && Object.defineProperty(o, t, {\n            enumerable: !0,\n            get: n[t]\n          });\n        }\n      },\n      o: function o(e, _o) {\n        return Object.prototype.hasOwnProperty.call(e, _o);\n      },\n      r: function r(e) {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n          value: \"Module\"\n        }), Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        });\n      }\n    },\n    o = {};\n  e.r(o), e.d(o, {\n    default: function _default() {\n      return n;\n    }\n  });\n  var n = \"attribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute vec2 a_position;\\nattribute float a_radius;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sqrtZoomRatio;\\nuniform float u_correctionRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\n\\nconst float minThickness = 1.7;\\nconst float bias = 255.0 / 254.0;\\nconst float arrowHeadLengthThicknessRatio = 2.5;\\n\\nvoid main() {\\n  float normalLength = length(a_normal);\\n  vec2 unitNormal = a_normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl. Please read it to\\n  // get better comments on what's happening:\\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\\n  float webGLThickness = pixelsThickness * u_correctionRatio;\\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\\n\\n  // Here, we move the point to leave space for the arrow head:\\n  float direction = sign(a_radius);\\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\\n\\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\\n\\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\\n\\n  v_normal = unitNormal;\\n  v_color = a_color;\\n  v_color.a *= bias;\\n}\\n\";\n  module.exports = o;\n})();","map":{"version":3,"names":["e","d","o","n","t","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","default","module","exports"],"sources":["/Users/declanbradley/Documents/GitHub/house-finance/node_modules/sigma/rendering/webgl/shaders/edge.clamped.vert.glsl.js"],"sourcesContent":["(()=>{\"use strict\";var e={d:(o,n)=>{for(var t in n)e.o(n,t)&&!e.o(o,t)&&Object.defineProperty(o,t,{enumerable:!0,get:n[t]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},o={};e.r(o),e.d(o,{default:()=>n});const n=\"attribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute vec2 a_position;\\nattribute float a_radius;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sqrtZoomRatio;\\nuniform float u_correctionRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\n\\nconst float minThickness = 1.7;\\nconst float bias = 255.0 / 254.0;\\nconst float arrowHeadLengthThicknessRatio = 2.5;\\n\\nvoid main() {\\n  float normalLength = length(a_normal);\\n  vec2 unitNormal = a_normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl. Please read it to\\n  // get better comments on what's happening:\\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\\n  float webGLThickness = pixelsThickness * u_correctionRatio;\\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\\n\\n  // Here, we move the point to leave space for the arrow head:\\n  float direction = sign(a_radius);\\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\\n\\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\\n\\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\\n\\n  v_normal = unitNormal;\\n  v_color = a_color;\\n  v_color.a *= bias;\\n}\\n\";module.exports=o})();"],"mappings":"AAAA,CAAC,YAAI;EAAC,YAAY;;EAAC,IAAIA,CAAC,GAAC;MAACC,CAAC,EAAC,WAACC,CAAC,EAACC,CAAC,EAAG;QAAC,KAAI,IAAIC,CAAC,IAAID,CAAC;UAACH,CAAC,CAACE,CAAC,CAACC,CAAC,EAACC,CAAC,CAAC,IAAE,CAACJ,CAAC,CAACE,CAAC,CAACA,CAAC,EAACE,CAAC,CAAC,IAAEC,MAAM,CAACC,cAAc,CAACJ,CAAC,EAACE,CAAC,EAAC;YAACG,UAAU,EAAC,CAAC,CAAC;YAACC,GAAG,EAACL,CAAC,CAACC,CAAC;UAAC,CAAC,CAAC;QAAA;MAAA,CAAC;MAACF,CAAC,EAAC,WAACF,CAAC,EAACE,EAAC;QAAA,OAAGG,MAAM,CAACI,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,CAAC,EAACE,EAAC,CAAC;MAAA;MAACU,CAAC,EAAC,WAAAZ,CAAC,EAAE;QAAC,WAAW,IAAE,OAAOa,MAAM,IAAEA,MAAM,CAACC,WAAW,IAAET,MAAM,CAACC,cAAc,CAACN,CAAC,EAACa,MAAM,CAACC,WAAW,EAAC;UAACC,KAAK,EAAC;QAAQ,CAAC,CAAC,EAACV,MAAM,CAACC,cAAc,CAACN,CAAC,EAAC,YAAY,EAAC;UAACe,KAAK,EAAC,CAAC;QAAC,CAAC,CAAC;MAAA;IAAC,CAAC;IAACb,CAAC,GAAC,CAAC,CAAC;EAACF,CAAC,CAACY,CAAC,CAACV,CAAC,CAAC,EAACF,CAAC,CAACC,CAAC,CAACC,CAAC,EAAC;IAACc,OAAO,EAAC;MAAA,OAAIb,CAAC;IAAA;EAAA,CAAC,CAAC;EAAC,IAAMA,CAAC,GAAC,wjDAAwjD;EAACc,MAAM,CAACC,OAAO,GAAChB,CAAC;AAAA,CAAC,GAAG"},"metadata":{},"sourceType":"script"}