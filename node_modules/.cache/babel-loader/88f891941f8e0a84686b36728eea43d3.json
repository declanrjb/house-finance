{"ast":null,"code":"!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : (t = \"undefined\" != typeof globalThis ? globalThis : t || self).graphology = e();\n}(this, function () {\n  \"use strict\";\n\n  function t(e) {\n    return t = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n      return typeof t;\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    }, t(e);\n  }\n  function e(t, e) {\n    t.prototype = Object.create(e.prototype), t.prototype.constructor = t, r(t, e);\n  }\n  function n(t) {\n    return n = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, n(t);\n  }\n  function r(t, e) {\n    return r = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, r(t, e);\n  }\n  function i() {\n    if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n    if (Reflect.construct.sham) return !1;\n    if (\"function\" == typeof Proxy) return !0;\n    try {\n      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n    } catch (t) {\n      return !1;\n    }\n  }\n  function o(t, e, n) {\n    return o = i() ? Reflect.construct.bind() : function (t, e, n) {\n      var i = [null];\n      i.push.apply(i, e);\n      var o = new (Function.bind.apply(t, i))();\n      return n && r(o, n.prototype), o;\n    }, o.apply(null, arguments);\n  }\n  function a(t) {\n    var e = \"function\" == typeof Map ? new Map() : void 0;\n    return a = function a(t) {\n      if (null === t || (i = t, -1 === Function.toString.call(i).indexOf(\"[native code]\"))) return t;\n      var i;\n      if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n      if (void 0 !== e) {\n        if (e.has(t)) return e.get(t);\n        e.set(t, a);\n      }\n      function a() {\n        return o(t, arguments, n(this).constructor);\n      }\n      return a.prototype = Object.create(t.prototype, {\n        constructor: {\n          value: a,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), r(a, t);\n    }, a(t);\n  }\n  function c(t) {\n    if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t;\n  }\n  var u = function u() {\n    for (var t = arguments[0], e = 1, n = arguments.length; e < n; e++) {\n      if (arguments[e]) for (var r in arguments[e]) {\n        t[r] = arguments[e][r];\n      }\n    }\n    return t;\n  };\n  function d(t, e, n, r) {\n    var i = t._nodes.get(e),\n      o = null;\n    return i ? o = \"mixed\" === r ? i.out && i.out[n] || i.undirected && i.undirected[n] : \"directed\" === r ? i.out && i.out[n] : i.undirected && i.undirected[n] : o;\n  }\n  function s(e) {\n    return \"object\" === t(e) && null !== e && e.constructor === Object;\n  }\n  function h(t) {\n    var e;\n    for (e in t) {\n      return !1;\n    }\n    return !0;\n  }\n  function p(t, e, n) {\n    Object.defineProperty(t, e, {\n      enumerable: !1,\n      configurable: !1,\n      writable: !0,\n      value: n\n    });\n  }\n  function f(t, e, n) {\n    var r = {\n      enumerable: !0,\n      configurable: !0\n    };\n    \"function\" == typeof n ? r.get = n : (r.value = n, r.writable = !1), Object.defineProperty(t, e, r);\n  }\n  function l(t) {\n    return !!s(t) && !(t.attributes && !Array.isArray(t.attributes));\n  }\n  \"function\" == typeof Object.assign && (u = Object.assign);\n  var g,\n    y = {\n      exports: {}\n    },\n    w = \"object\" == typeof Reflect ? Reflect : null,\n    v = w && \"function\" == typeof w.apply ? w.apply : function (t, e, n) {\n      return Function.prototype.apply.call(t, e, n);\n    };\n  g = w && \"function\" == typeof w.ownKeys ? w.ownKeys : Object.getOwnPropertySymbols ? function (t) {\n    return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));\n  } : function (t) {\n    return Object.getOwnPropertyNames(t);\n  };\n  var b = Number.isNaN || function (t) {\n    return t != t;\n  };\n  function m() {\n    m.init.call(this);\n  }\n  y.exports = m, y.exports.once = function (t, e) {\n    return new Promise(function (n, r) {\n      function i(n) {\n        t.removeListener(e, o), r(n);\n      }\n      function o() {\n        \"function\" == typeof t.removeListener && t.removeListener(\"error\", i), n([].slice.call(arguments));\n      }\n      U(t, e, o, {\n        once: !0\n      }), \"error\" !== e && function (t, e, n) {\n        \"function\" == typeof t.on && U(t, \"error\", e, n);\n      }(t, i, {\n        once: !0\n      });\n    });\n  }, m.EventEmitter = m, m.prototype._events = void 0, m.prototype._eventsCount = 0, m.prototype._maxListeners = void 0;\n  var k = 10;\n  function _(t) {\n    if (\"function\" != typeof t) throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof t);\n  }\n  function G(t) {\n    return void 0 === t._maxListeners ? m.defaultMaxListeners : t._maxListeners;\n  }\n  function x(t, e, n, r) {\n    var i, o, a, c;\n    if (_(n), void 0 === (o = t._events) ? (o = t._events = Object.create(null), t._eventsCount = 0) : (void 0 !== o.newListener && (t.emit(\"newListener\", e, n.listener ? n.listener : n), o = t._events), a = o[e]), void 0 === a) a = o[e] = n, ++t._eventsCount;else if (\"function\" == typeof a ? a = o[e] = r ? [n, a] : [a, n] : r ? a.unshift(n) : a.push(n), (i = G(t)) > 0 && a.length > i && !a.warned) {\n      a.warned = !0;\n      var u = new Error(\"Possible EventEmitter memory leak detected. \" + a.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n      u.name = \"MaxListenersExceededWarning\", u.emitter = t, u.type = e, u.count = a.length, c = u, console && console.warn && console.warn(c);\n    }\n    return t;\n  }\n  function E() {\n    if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n  }\n  function A(t, e, n) {\n    var r = {\n        fired: !1,\n        wrapFn: void 0,\n        target: t,\n        type: e,\n        listener: n\n      },\n      i = E.bind(r);\n    return i.listener = n, r.wrapFn = i, i;\n  }\n  function L(t, e, n) {\n    var r = t._events;\n    if (void 0 === r) return [];\n    var i = r[e];\n    return void 0 === i ? [] : \"function\" == typeof i ? n ? [i.listener || i] : [i] : n ? function (t) {\n      for (var e = new Array(t.length), n = 0; n < e.length; ++n) {\n        e[n] = t[n].listener || t[n];\n      }\n      return e;\n    }(i) : D(i, i.length);\n  }\n  function S(t) {\n    var e = this._events;\n    if (void 0 !== e) {\n      var n = e[t];\n      if (\"function\" == typeof n) return 1;\n      if (void 0 !== n) return n.length;\n    }\n    return 0;\n  }\n  function D(t, e) {\n    for (var n = new Array(e), r = 0; r < e; ++r) {\n      n[r] = t[r];\n    }\n    return n;\n  }\n  function U(t, e, n, r) {\n    if (\"function\" == typeof t.on) r.once ? t.once(e, n) : t.on(e, n);else {\n      if (\"function\" != typeof t.addEventListener) throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof t);\n      t.addEventListener(e, function i(o) {\n        r.once && t.removeEventListener(e, i), n(o);\n      });\n    }\n  }\n  function N(t) {\n    if (\"function\" != typeof t) throw new Error(\"obliterator/iterator: expecting a function!\");\n    this.next = t;\n  }\n  Object.defineProperty(m, \"defaultMaxListeners\", {\n    enumerable: !0,\n    get: function get() {\n      return k;\n    },\n    set: function set(t) {\n      if (\"number\" != typeof t || t < 0 || b(t)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + t + \".\");\n      k = t;\n    }\n  }), m.init = function () {\n    void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n  }, m.prototype.setMaxListeners = function (t) {\n    if (\"number\" != typeof t || t < 0 || b(t)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + t + \".\");\n    return this._maxListeners = t, this;\n  }, m.prototype.getMaxListeners = function () {\n    return G(this);\n  }, m.prototype.emit = function (t) {\n    for (var e = [], n = 1; n < arguments.length; n++) {\n      e.push(arguments[n]);\n    }\n    var r = \"error\" === t,\n      i = this._events;\n    if (void 0 !== i) r = r && void 0 === i.error;else if (!r) return !1;\n    if (r) {\n      var o;\n      if (e.length > 0 && (o = e[0]), o instanceof Error) throw o;\n      var a = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n      throw a.context = o, a;\n    }\n    var c = i[t];\n    if (void 0 === c) return !1;\n    if (\"function\" == typeof c) v(c, this, e);else {\n      var u = c.length,\n        d = D(c, u);\n      for (n = 0; n < u; ++n) {\n        v(d[n], this, e);\n      }\n    }\n    return !0;\n  }, m.prototype.addListener = function (t, e) {\n    return x(this, t, e, !1);\n  }, m.prototype.on = m.prototype.addListener, m.prototype.prependListener = function (t, e) {\n    return x(this, t, e, !0);\n  }, m.prototype.once = function (t, e) {\n    return _(e), this.on(t, A(this, t, e)), this;\n  }, m.prototype.prependOnceListener = function (t, e) {\n    return _(e), this.prependListener(t, A(this, t, e)), this;\n  }, m.prototype.removeListener = function (t, e) {\n    var n, r, i, o, a;\n    if (_(e), void 0 === (r = this._events)) return this;\n    if (void 0 === (n = r[t])) return this;\n    if (n === e || n.listener === e) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r[t], r.removeListener && this.emit(\"removeListener\", t, n.listener || e));else if (\"function\" != typeof n) {\n      for (i = -1, o = n.length - 1; o >= 0; o--) {\n        if (n[o] === e || n[o].listener === e) {\n          a = n[o].listener, i = o;\n          break;\n        }\n      }\n      if (i < 0) return this;\n      0 === i ? n.shift() : function (t, e) {\n        for (; e + 1 < t.length; e++) {\n          t[e] = t[e + 1];\n        }\n        t.pop();\n      }(n, i), 1 === n.length && (r[t] = n[0]), void 0 !== r.removeListener && this.emit(\"removeListener\", t, a || e);\n    }\n    return this;\n  }, m.prototype.off = m.prototype.removeListener, m.prototype.removeAllListeners = function (t) {\n    var e, n, r;\n    if (void 0 === (n = this._events)) return this;\n    if (void 0 === n.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[t] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[t]), this;\n    if (0 === arguments.length) {\n      var i,\n        o = Object.keys(n);\n      for (r = 0; r < o.length; ++r) {\n        \"removeListener\" !== (i = o[r]) && this.removeAllListeners(i);\n      }\n      return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n    }\n    if (\"function\" == typeof (e = n[t])) this.removeListener(t, e);else if (void 0 !== e) for (r = e.length - 1; r >= 0; r--) {\n      this.removeListener(t, e[r]);\n    }\n    return this;\n  }, m.prototype.listeners = function (t) {\n    return L(this, t, !0);\n  }, m.prototype.rawListeners = function (t) {\n    return L(this, t, !1);\n  }, m.listenerCount = function (t, e) {\n    return \"function\" == typeof t.listenerCount ? t.listenerCount(e) : S.call(t, e);\n  }, m.prototype.listenerCount = S, m.prototype.eventNames = function () {\n    return this._eventsCount > 0 ? g(this._events) : [];\n  }, \"undefined\" != typeof Symbol && (N.prototype[Symbol.iterator] = function () {\n    return this;\n  }), N.of = function () {\n    var t = arguments,\n      e = t.length,\n      n = 0;\n    return new N(function () {\n      return n >= e ? {\n        done: !0\n      } : {\n        done: !1,\n        value: t[n++]\n      };\n    });\n  }, N.empty = function () {\n    return new N(function () {\n      return {\n        done: !0\n      };\n    });\n  }, N.fromSequence = function (t) {\n    var e = 0,\n      n = t.length;\n    return new N(function () {\n      return e >= n ? {\n        done: !0\n      } : {\n        done: !1,\n        value: t[e++]\n      };\n    });\n  }, N.is = function (t) {\n    return t instanceof N || \"object\" == typeof t && null !== t && \"function\" == typeof t.next;\n  };\n  var O = N,\n    j = {};\n  j.ARRAY_BUFFER_SUPPORT = \"undefined\" != typeof ArrayBuffer, j.SYMBOL_SUPPORT = \"undefined\" != typeof Symbol;\n  var C = O,\n    M = j,\n    z = M.ARRAY_BUFFER_SUPPORT,\n    W = M.SYMBOL_SUPPORT;\n  var P = function P(t) {\n      var e = function (t) {\n        return \"string\" == typeof t || Array.isArray(t) || z && ArrayBuffer.isView(t) ? C.fromSequence(t) : \"object\" != typeof t || null === t ? null : W && \"function\" == typeof t[Symbol.iterator] ? t[Symbol.iterator]() : \"function\" == typeof t.next ? t : null;\n      }(t);\n      if (!e) throw new Error(\"obliterator: target is not iterable nor a valid iterator.\");\n      return e;\n    },\n    R = P,\n    K = function K(t, e) {\n      for (var n, r = arguments.length > 1 ? e : 1 / 0, i = r !== 1 / 0 ? new Array(r) : [], o = 0, a = R(t);;) {\n        if (o === r) return i;\n        if ((n = a.next()).done) return o !== e && (i.length = o), i;\n        i[o++] = n.value;\n      }\n    },\n    T = function (t) {\n      function n(e) {\n        var n;\n        return (n = t.call(this) || this).name = \"GraphError\", n.message = e, n;\n      }\n      return e(n, t), n;\n    }(a(Error)),\n    B = function (t) {\n      function n(e) {\n        var r;\n        return (r = t.call(this, e) || this).name = \"InvalidArgumentsGraphError\", \"function\" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r), n.prototype.constructor), r;\n      }\n      return e(n, t), n;\n    }(T),\n    F = function (t) {\n      function n(e) {\n        var r;\n        return (r = t.call(this, e) || this).name = \"NotFoundGraphError\", \"function\" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r), n.prototype.constructor), r;\n      }\n      return e(n, t), n;\n    }(T),\n    I = function (t) {\n      function n(e) {\n        var r;\n        return (r = t.call(this, e) || this).name = \"UsageGraphError\", \"function\" == typeof Error.captureStackTrace && Error.captureStackTrace(c(r), n.prototype.constructor), r;\n      }\n      return e(n, t), n;\n    }(T);\n  function Y(t, e) {\n    this.key = t, this.attributes = e, this.clear();\n  }\n  function q(t, e) {\n    this.key = t, this.attributes = e, this.clear();\n  }\n  function J(t, e) {\n    this.key = t, this.attributes = e, this.clear();\n  }\n  function V(t, e, n, r, i) {\n    this.key = e, this.attributes = i, this.undirected = t, this.source = n, this.target = r;\n  }\n  Y.prototype.clear = function () {\n    this.inDegree = 0, this.outDegree = 0, this.undirectedDegree = 0, this.undirectedLoops = 0, this.directedLoops = 0, this.in = {}, this.out = {}, this.undirected = {};\n  }, q.prototype.clear = function () {\n    this.inDegree = 0, this.outDegree = 0, this.directedLoops = 0, this.in = {}, this.out = {};\n  }, J.prototype.clear = function () {\n    this.undirectedDegree = 0, this.undirectedLoops = 0, this.undirected = {};\n  }, V.prototype.attach = function () {\n    var t = \"out\",\n      e = \"in\";\n    this.undirected && (t = e = \"undirected\");\n    var n = this.source.key,\n      r = this.target.key;\n    this.source[t][r] = this, this.undirected && n === r || (this.target[e][n] = this);\n  }, V.prototype.attachMulti = function () {\n    var t = \"out\",\n      e = \"in\",\n      n = this.source.key,\n      r = this.target.key;\n    this.undirected && (t = e = \"undirected\");\n    var i = this.source[t],\n      o = i[r];\n    if (void 0 === o) return i[r] = this, void (this.undirected && n === r || (this.target[e][n] = this));\n    o.previous = this, this.next = o, i[r] = this, this.target[e][n] = this;\n  }, V.prototype.detach = function () {\n    var t = this.source.key,\n      e = this.target.key,\n      n = \"out\",\n      r = \"in\";\n    this.undirected && (n = r = \"undirected\"), delete this.source[n][e], delete this.target[r][t];\n  }, V.prototype.detachMulti = function () {\n    var t = this.source.key,\n      e = this.target.key,\n      n = \"out\",\n      r = \"in\";\n    this.undirected && (n = r = \"undirected\"), void 0 === this.previous ? void 0 === this.next ? (delete this.source[n][e], delete this.target[r][t]) : (this.next.previous = void 0, this.source[n][e] = this.next, this.target[r][t] = this.next) : (this.previous.next = this.next, void 0 !== this.next && (this.next.previous = this.previous));\n  };\n  function H(t, e, n, r, i, o, a) {\n    var c, u, d, s;\n    if (r = \"\" + r, 0 === n) {\n      if (!(c = t._nodes.get(r))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(r, '\" node in the graph.'));\n      d = i, s = o;\n    } else if (3 === n) {\n      if (i = \"\" + i, !(u = t._edges.get(i))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(i, '\" edge in the graph.'));\n      var h = u.source.key,\n        p = u.target.key;\n      if (r === h) c = u.target;else {\n        if (r !== p) throw new F(\"Graph.\".concat(e, ': the \"').concat(r, '\" node is not attached to the \"').concat(i, '\" edge (').concat(h, \", \").concat(p, \").\"));\n        c = u.source;\n      }\n      d = o, s = a;\n    } else {\n      if (!(u = t._edges.get(r))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(r, '\" edge in the graph.'));\n      c = 1 === n ? u.source : u.target, d = i, s = o;\n    }\n    return [c, d, s];\n  }\n  var Q = [{\n    name: function name(t) {\n      return \"get\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        return a.attributes[c];\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"get\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        return H(this, e, n, t, r)[0].attributes;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"has\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        return a.attributes.hasOwnProperty(c);\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"set\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i, o) {\n        var a = H(this, e, n, t, r, i, o),\n          c = a[0],\n          u = a[1],\n          d = a[2];\n        return c.attributes[u] = d, this.emit(\"nodeAttributesUpdated\", {\n          key: c.key,\n          type: \"set\",\n          attributes: c.attributes,\n          name: u\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"update\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i, o) {\n        var a = H(this, e, n, t, r, i, o),\n          c = a[0],\n          u = a[1],\n          d = a[2];\n        if (\"function\" != typeof d) throw new B(\"Graph.\".concat(e, \": updater should be a function.\"));\n        var s = c.attributes,\n          h = d(s[u]);\n        return s[u] = h, this.emit(\"nodeAttributesUpdated\", {\n          key: c.key,\n          type: \"set\",\n          attributes: c.attributes,\n          name: u\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"remove\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        return delete a.attributes[c], this.emit(\"nodeAttributesUpdated\", {\n          key: a.key,\n          type: \"remove\",\n          attributes: a.attributes,\n          name: c\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"replace\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        if (!s(c)) throw new B(\"Graph.\".concat(e, \": provided attributes are not a plain object.\"));\n        return a.attributes = c, this.emit(\"nodeAttributesUpdated\", {\n          key: a.key,\n          type: \"replace\",\n          attributes: a.attributes\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"merge\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        if (!s(c)) throw new B(\"Graph.\".concat(e, \": provided attributes are not a plain object.\"));\n        return u(a.attributes, c), this.emit(\"nodeAttributesUpdated\", {\n          key: a.key,\n          type: \"merge\",\n          attributes: a.attributes,\n          data: c\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"update\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o = H(this, e, n, t, r, i),\n          a = o[0],\n          c = o[1];\n        if (\"function\" != typeof c) throw new B(\"Graph.\".concat(e, \": provided updater is not a function.\"));\n        return a.attributes = c(a.attributes), this.emit(\"nodeAttributesUpdated\", {\n          key: a.key,\n          type: \"update\",\n          attributes: a.attributes\n        }), this;\n      };\n    }\n  }];\n  var X = [{\n    name: function name(t) {\n      return \"get\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        return i.attributes[r];\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"get\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t) {\n        var r;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 1) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var i = \"\" + t,\n            o = \"\" + arguments[1];\n          if (!(r = d(this, i, o, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(i, '\" - \"').concat(o, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(r = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        return r.attributes;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"has\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        return i.attributes.hasOwnProperty(r);\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"set\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 3) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var a = \"\" + t,\n            c = \"\" + r;\n          if (r = arguments[2], i = arguments[3], !(o = d(this, a, c, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(a, '\" - \"').concat(c, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(o = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        return o.attributes[r] = i, this.emit(\"edgeAttributesUpdated\", {\n          key: o.key,\n          type: \"set\",\n          attributes: o.attributes,\n          name: r\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"update\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r, i) {\n        var o;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 3) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var a = \"\" + t,\n            c = \"\" + r;\n          if (r = arguments[2], i = arguments[3], !(o = d(this, a, c, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(a, '\" - \"').concat(c, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(o = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        if (\"function\" != typeof i) throw new B(\"Graph.\".concat(e, \": updater should be a function.\"));\n        return o.attributes[r] = i(o.attributes[r]), this.emit(\"edgeAttributesUpdated\", {\n          key: o.key,\n          type: \"set\",\n          attributes: o.attributes,\n          name: r\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"remove\".concat(t, \"Attribute\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        return delete i.attributes[r], this.emit(\"edgeAttributesUpdated\", {\n          key: i.key,\n          type: \"remove\",\n          attributes: i.attributes,\n          name: r\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"replace\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        if (!s(r)) throw new B(\"Graph.\".concat(e, \": provided attributes are not a plain object.\"));\n        return i.attributes = r, this.emit(\"edgeAttributesUpdated\", {\n          key: i.key,\n          type: \"replace\",\n          attributes: i.attributes\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"merge\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        if (!s(r)) throw new B(\"Graph.\".concat(e, \": provided attributes are not a plain object.\"));\n        return u(i.attributes, r), this.emit(\"edgeAttributesUpdated\", {\n          key: i.key,\n          type: \"merge\",\n          attributes: i.attributes,\n          data: r\n        }), this;\n      };\n    }\n  }, {\n    name: function name(t) {\n      return \"update\".concat(t, \"Attributes\");\n    },\n    attacher: function attacher(t, e, n) {\n      t.prototype[e] = function (t, r) {\n        var i;\n        if (\"mixed\" !== this.type && \"mixed\" !== n && n !== this.type) throw new I(\"Graph.\".concat(e, \": cannot find this type of edges in your \").concat(this.type, \" graph.\"));\n        if (arguments.length > 2) {\n          if (this.multi) throw new I(\"Graph.\".concat(e, \": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.\"));\n          var o = \"\" + t,\n            a = \"\" + r;\n          if (r = arguments[2], !(i = d(this, o, a, n))) throw new F(\"Graph.\".concat(e, ': could not find an edge for the given path (\"').concat(o, '\" - \"').concat(a, '\").'));\n        } else {\n          if (\"mixed\" !== n) throw new I(\"Graph.\".concat(e, \": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.\"));\n          if (t = \"\" + t, !(i = this._edges.get(t))) throw new F(\"Graph.\".concat(e, ': could not find the \"').concat(t, '\" edge in the graph.'));\n        }\n        if (\"function\" != typeof r) throw new B(\"Graph.\".concat(e, \": provided updater is not a function.\"));\n        return i.attributes = r(i.attributes), this.emit(\"edgeAttributesUpdated\", {\n          key: i.key,\n          type: \"update\",\n          attributes: i.attributes\n        }), this;\n      };\n    }\n  }];\n  var Z = O,\n    $ = P,\n    tt = function tt() {\n      var t = arguments,\n        e = null,\n        n = -1;\n      return new Z(function () {\n        for (var r = null;;) {\n          if (null === e) {\n            if (++n >= t.length) return {\n              done: !0\n            };\n            e = $(t[n]);\n          }\n          if (!0 !== (r = e.next()).done) break;\n          e = null;\n        }\n        return r;\n      });\n    },\n    et = [{\n      name: \"edges\",\n      type: \"mixed\"\n    }, {\n      name: \"inEdges\",\n      type: \"directed\",\n      direction: \"in\"\n    }, {\n      name: \"outEdges\",\n      type: \"directed\",\n      direction: \"out\"\n    }, {\n      name: \"inboundEdges\",\n      type: \"mixed\",\n      direction: \"in\"\n    }, {\n      name: \"outboundEdges\",\n      type: \"mixed\",\n      direction: \"out\"\n    }, {\n      name: \"directedEdges\",\n      type: \"directed\"\n    }, {\n      name: \"undirectedEdges\",\n      type: \"undirected\"\n    }];\n  function nt(t, e, n, r) {\n    var i = !1;\n    for (var o in e) {\n      if (o !== r) {\n        var a = e[o];\n        if (i = n(a.key, a.attributes, a.source.key, a.target.key, a.source.attributes, a.target.attributes, a.undirected), t && i) return a.key;\n      }\n    }\n  }\n  function rt(t, e, n, r) {\n    var i,\n      o,\n      a,\n      c = !1;\n    for (var u in e) {\n      if (u !== r) {\n        i = e[u];\n        do {\n          if (o = i.source, a = i.target, c = n(i.key, i.attributes, o.key, a.key, o.attributes, a.attributes, i.undirected), t && c) return i.key;\n          i = i.next;\n        } while (void 0 !== i);\n      }\n    }\n  }\n  function it(t, e) {\n    var n,\n      r = Object.keys(t),\n      i = r.length,\n      o = 0;\n    return new O(function () {\n      do {\n        if (n) n = n.next;else {\n          if (o >= i) return {\n            done: !0\n          };\n          var a = r[o++];\n          if (a === e) {\n            n = void 0;\n            continue;\n          }\n          n = t[a];\n        }\n      } while (!n);\n      return {\n        done: !1,\n        value: {\n          edge: n.key,\n          attributes: n.attributes,\n          source: n.source.key,\n          target: n.target.key,\n          sourceAttributes: n.source.attributes,\n          targetAttributes: n.target.attributes,\n          undirected: n.undirected\n        }\n      };\n    });\n  }\n  function ot(t, e, n, r) {\n    var i = e[n];\n    if (i) {\n      var o = i.source,\n        a = i.target;\n      return r(i.key, i.attributes, o.key, a.key, o.attributes, a.attributes, i.undirected) && t ? i.key : void 0;\n    }\n  }\n  function at(t, e, n, r) {\n    var i = e[n];\n    if (i) {\n      var o = !1;\n      do {\n        if (o = r(i.key, i.attributes, i.source.key, i.target.key, i.source.attributes, i.target.attributes, i.undirected), t && o) return i.key;\n        i = i.next;\n      } while (void 0 !== i);\n    }\n  }\n  function ct(t, e) {\n    var n = t[e];\n    return void 0 !== n.next ? new O(function () {\n      if (!n) return {\n        done: !0\n      };\n      var t = {\n        edge: n.key,\n        attributes: n.attributes,\n        source: n.source.key,\n        target: n.target.key,\n        sourceAttributes: n.source.attributes,\n        targetAttributes: n.target.attributes,\n        undirected: n.undirected\n      };\n      return n = n.next, {\n        done: !1,\n        value: t\n      };\n    }) : O.of({\n      edge: n.key,\n      attributes: n.attributes,\n      source: n.source.key,\n      target: n.target.key,\n      sourceAttributes: n.source.attributes,\n      targetAttributes: n.target.attributes,\n      undirected: n.undirected\n    });\n  }\n  function ut(t, e) {\n    if (0 === t.size) return [];\n    if (\"mixed\" === e || e === t.type) return \"function\" == typeof Array.from ? Array.from(t._edges.keys()) : K(t._edges.keys(), t._edges.size);\n    for (var n, r, i = \"undirected\" === e ? t.undirectedSize : t.directedSize, o = new Array(i), a = \"undirected\" === e, c = t._edges.values(), u = 0; !0 !== (n = c.next()).done;) {\n      (r = n.value).undirected === a && (o[u++] = r.key);\n    }\n    return o;\n  }\n  function dt(t, e, n, r) {\n    if (0 !== e.size) for (var i, o, a = \"mixed\" !== n && n !== e.type, c = \"undirected\" === n, u = !1, d = e._edges.values(); !0 !== (i = d.next()).done;) {\n      if (o = i.value, !a || o.undirected === c) {\n        var s = o,\n          h = s.key,\n          p = s.attributes,\n          f = s.source,\n          l = s.target;\n        if (u = r(h, p, f.key, l.key, f.attributes, l.attributes, o.undirected), t && u) return h;\n      }\n    }\n  }\n  function st(t, e) {\n    if (0 === t.size) return O.empty();\n    var n = \"mixed\" !== e && e !== t.type,\n      r = \"undirected\" === e,\n      i = t._edges.values();\n    return new O(function () {\n      for (var t, e;;) {\n        if ((t = i.next()).done) return t;\n        if (e = t.value, !n || e.undirected === r) break;\n      }\n      return {\n        value: {\n          edge: e.key,\n          attributes: e.attributes,\n          source: e.source.key,\n          target: e.target.key,\n          sourceAttributes: e.source.attributes,\n          targetAttributes: e.target.attributes,\n          undirected: e.undirected\n        },\n        done: !1\n      };\n    });\n  }\n  function ht(t, e, n, r, i, o) {\n    var a,\n      c = e ? rt : nt;\n    if (\"undirected\" !== n) {\n      if (\"out\" !== r && (a = c(t, i.in, o), t && a)) return a;\n      if (\"in\" !== r && (a = c(t, i.out, o, r ? void 0 : i.key), t && a)) return a;\n    }\n    if (\"directed\" !== n && (a = c(t, i.undirected, o), t && a)) return a;\n  }\n  function pt(t, e, n, r) {\n    var i = [];\n    return ht(!1, t, e, n, r, function (t) {\n      i.push(t);\n    }), i;\n  }\n  function ft(t, e, n) {\n    var r = O.empty();\n    return \"undirected\" !== t && (\"out\" !== e && void 0 !== n.in && (r = tt(r, it(n.in))), \"in\" !== e && void 0 !== n.out && (r = tt(r, it(n.out, e ? void 0 : n.key)))), \"directed\" !== t && void 0 !== n.undirected && (r = tt(r, it(n.undirected))), r;\n  }\n  function lt(t, e, n, r, i, o, a) {\n    var c,\n      u = n ? at : ot;\n    if (\"undirected\" !== e) {\n      if (void 0 !== i.in && \"out\" !== r && (c = u(t, i.in, o, a), t && c)) return c;\n      if (void 0 !== i.out && \"in\" !== r && (r || i.key !== o) && (c = u(t, i.out, o, a), t && c)) return c;\n    }\n    if (\"directed\" !== e && void 0 !== i.undirected && (c = u(t, i.undirected, o, a), t && c)) return c;\n  }\n  function gt(t, e, n, r, i) {\n    var o = [];\n    return lt(!1, t, e, n, r, i, function (t) {\n      o.push(t);\n    }), o;\n  }\n  function yt(t, e, n, r) {\n    var i = O.empty();\n    return \"undirected\" !== t && (void 0 !== n.in && \"out\" !== e && r in n.in && (i = tt(i, ct(n.in, r))), void 0 !== n.out && \"in\" !== e && r in n.out && (e || n.key !== r) && (i = tt(i, ct(n.out, r)))), \"directed\" !== t && void 0 !== n.undirected && r in n.undirected && (i = tt(i, ct(n.undirected, r))), i;\n  }\n  var wt = [{\n    name: \"neighbors\",\n    type: \"mixed\"\n  }, {\n    name: \"inNeighbors\",\n    type: \"directed\",\n    direction: \"in\"\n  }, {\n    name: \"outNeighbors\",\n    type: \"directed\",\n    direction: \"out\"\n  }, {\n    name: \"inboundNeighbors\",\n    type: \"mixed\",\n    direction: \"in\"\n  }, {\n    name: \"outboundNeighbors\",\n    type: \"mixed\",\n    direction: \"out\"\n  }, {\n    name: \"directedNeighbors\",\n    type: \"directed\"\n  }, {\n    name: \"undirectedNeighbors\",\n    type: \"undirected\"\n  }];\n  function vt() {\n    this.A = null, this.B = null;\n  }\n  function bt(t, e, n, r, i) {\n    for (var o in r) {\n      var a = r[o],\n        c = a.source,\n        u = a.target,\n        d = c === n ? u : c;\n      if (!e || !e.has(d.key)) {\n        var s = i(d.key, d.attributes);\n        if (t && s) return d.key;\n      }\n    }\n  }\n  function mt(t, e, n, r, i) {\n    if (\"mixed\" !== e) {\n      if (\"undirected\" === e) return bt(t, null, r, r.undirected, i);\n      if (\"string\" == typeof n) return bt(t, null, r, r[n], i);\n    }\n    var o,\n      a = new vt();\n    if (\"undirected\" !== e) {\n      if (\"out\" !== n) {\n        if (o = bt(t, null, r, r.in, i), t && o) return o;\n        a.wrap(r.in);\n      }\n      if (\"in\" !== n) {\n        if (o = bt(t, a, r, r.out, i), t && o) return o;\n        a.wrap(r.out);\n      }\n    }\n    if (\"directed\" !== e && (o = bt(t, a, r, r.undirected, i), t && o)) return o;\n  }\n  function kt(t, e, n) {\n    var r = Object.keys(n),\n      i = r.length,\n      o = 0;\n    return new O(function () {\n      var a = null;\n      do {\n        if (o >= i) return t && t.wrap(n), {\n          done: !0\n        };\n        var c = n[r[o++]],\n          u = c.source,\n          d = c.target;\n        a = u === e ? d : u, t && t.has(a.key) && (a = null);\n      } while (null === a);\n      return {\n        done: !1,\n        value: {\n          neighbor: a.key,\n          attributes: a.attributes\n        }\n      };\n    });\n  }\n  function _t(t, e) {\n    var n = e.name,\n      r = e.type,\n      i = e.direction;\n    t.prototype[n] = function (t) {\n      if (\"mixed\" !== r && \"mixed\" !== this.type && r !== this.type) return [];\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (void 0 === e) throw new F(\"Graph.\".concat(n, ': could not find the \"').concat(t, '\" node in the graph.'));\n      return function (t, e, n) {\n        if (\"mixed\" !== t) {\n          if (\"undirected\" === t) return Object.keys(n.undirected);\n          if (\"string\" == typeof e) return Object.keys(n[e]);\n        }\n        var r = [];\n        return mt(!1, t, e, n, function (t) {\n          r.push(t);\n        }), r;\n      }(\"mixed\" === r ? this.type : r, i, e);\n    };\n  }\n  function Gt(t, e) {\n    var n = e.name,\n      r = e.type,\n      i = e.direction,\n      o = n.slice(0, -1) + \"Entries\";\n    t.prototype[o] = function (t) {\n      if (\"mixed\" !== r && \"mixed\" !== this.type && r !== this.type) return O.empty();\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (void 0 === e) throw new F(\"Graph.\".concat(o, ': could not find the \"').concat(t, '\" node in the graph.'));\n      return function (t, e, n) {\n        if (\"mixed\" !== t) {\n          if (\"undirected\" === t) return kt(null, n, n.undirected);\n          if (\"string\" == typeof e) return kt(null, n, n[e]);\n        }\n        var r = O.empty(),\n          i = new vt();\n        return \"undirected\" !== t && (\"out\" !== e && (r = tt(r, kt(i, n, n.in))), \"in\" !== e && (r = tt(r, kt(i, n, n.out)))), \"directed\" !== t && (r = tt(r, kt(i, n, n.undirected))), r;\n      }(\"mixed\" === r ? this.type : r, i, e);\n    };\n  }\n  function xt(t, e, n, r, i) {\n    for (var o, a, c, u, d, s, h, p = r._nodes.values(), f = r.type; !0 !== (o = p.next()).done;) {\n      var l = !1;\n      if (a = o.value, \"undirected\" !== f) for (c in u = a.out) {\n        d = u[c];\n        do {\n          if (s = d.target, l = !0, h = i(a.key, s.key, a.attributes, s.attributes, d.key, d.attributes, d.undirected), t && h) return d;\n          d = d.next;\n        } while (d);\n      }\n      if (\"directed\" !== f) for (c in u = a.undirected) {\n        if (!(e && a.key > c)) {\n          d = u[c];\n          do {\n            if ((s = d.target).key !== c && (s = d.source), l = !0, h = i(a.key, s.key, a.attributes, s.attributes, d.key, d.attributes, d.undirected), t && h) return d;\n            d = d.next;\n          } while (d);\n        }\n      }\n      if (n && !l && (h = i(a.key, null, a.attributes, null, null, null, null), t && h)) return null;\n    }\n  }\n  function Et(t) {\n    if (!s(t)) throw new B('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.');\n    if (!(\"key\" in t)) throw new B(\"Graph.import: serialized node is missing its key.\");\n    if (\"attributes\" in t && (!s(t.attributes) || null === t.attributes)) throw new B(\"Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.\");\n  }\n  function At(t) {\n    if (!s(t)) throw new B('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.');\n    if (!(\"source\" in t)) throw new B(\"Graph.import: serialized edge is missing its source.\");\n    if (!(\"target\" in t)) throw new B(\"Graph.import: serialized edge is missing its target.\");\n    if (\"attributes\" in t && (!s(t.attributes) || null === t.attributes)) throw new B(\"Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.\");\n    if (\"undirected\" in t && \"boolean\" != typeof t.undirected) throw new B(\"Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.\");\n  }\n  vt.prototype.wrap = function (t) {\n    null === this.A ? this.A = t : null === this.B && (this.B = t);\n  }, vt.prototype.has = function (t) {\n    return null !== this.A && t in this.A || null !== this.B && t in this.B;\n  };\n  var Lt,\n    St = (Lt = 255 & Math.floor(256 * Math.random()), function () {\n      return Lt++;\n    }),\n    Dt = new Set([\"directed\", \"undirected\", \"mixed\"]),\n    Ut = new Set([\"domain\", \"_events\", \"_eventsCount\", \"_maxListeners\"]),\n    Nt = {\n      allowSelfLoops: !0,\n      multi: !1,\n      type: \"mixed\"\n    };\n  function Ot(t, e, n) {\n    var r = new t.NodeDataClass(e, n);\n    return t._nodes.set(e, r), t.emit(\"nodeAdded\", {\n      key: e,\n      attributes: n\n    }), r;\n  }\n  function jt(t, e, n, r, i, o, a, c) {\n    if (!r && \"undirected\" === t.type) throw new I(\"Graph.\".concat(e, \": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.\"));\n    if (r && \"directed\" === t.type) throw new I(\"Graph.\".concat(e, \": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.\"));\n    if (c && !s(c)) throw new B(\"Graph.\".concat(e, ': invalid attributes. Expecting an object but got \"').concat(c, '\"'));\n    if (o = \"\" + o, a = \"\" + a, c = c || {}, !t.allowSelfLoops && o === a) throw new I(\"Graph.\".concat(e, ': source & target are the same (\"').concat(o, \"\\\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.\"));\n    var u = t._nodes.get(o),\n      d = t._nodes.get(a);\n    if (!u) throw new F(\"Graph.\".concat(e, ': source node \"').concat(o, '\" not found.'));\n    if (!d) throw new F(\"Graph.\".concat(e, ': target node \"').concat(a, '\" not found.'));\n    var h = {\n      key: null,\n      undirected: r,\n      source: o,\n      target: a,\n      attributes: c\n    };\n    if (n) i = t._edgeKeyGenerator();else if (i = \"\" + i, t._edges.has(i)) throw new I(\"Graph.\".concat(e, ': the \"').concat(i, '\" edge already exists in the graph.'));\n    if (!t.multi && (r ? void 0 !== u.undirected[a] : void 0 !== u.out[a])) throw new I(\"Graph.\".concat(e, ': an edge linking \"').concat(o, '\" to \"').concat(a, \"\\\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.\"));\n    var p = new V(r, i, u, d, c);\n    t._edges.set(i, p);\n    var f = o === a;\n    return r ? (u.undirectedDegree++, d.undirectedDegree++, f && (u.undirectedLoops++, t._undirectedSelfLoopCount++)) : (u.outDegree++, d.inDegree++, f && (u.directedLoops++, t._directedSelfLoopCount++)), t.multi ? p.attachMulti() : p.attach(), r ? t._undirectedSize++ : t._directedSize++, h.key = i, t.emit(\"edgeAdded\", h), i;\n  }\n  function Ct(t, e, n, r, i, o, a, c, d) {\n    if (!r && \"undirected\" === t.type) throw new I(\"Graph.\".concat(e, \": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.\"));\n    if (r && \"directed\" === t.type) throw new I(\"Graph.\".concat(e, \": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.\"));\n    if (c) if (d) {\n      if (\"function\" != typeof c) throw new B(\"Graph.\".concat(e, ': invalid updater function. Expecting a function but got \"').concat(c, '\"'));\n    } else if (!s(c)) throw new B(\"Graph.\".concat(e, ': invalid attributes. Expecting an object but got \"').concat(c, '\"'));\n    var h;\n    if (o = \"\" + o, a = \"\" + a, d && (h = c, c = void 0), !t.allowSelfLoops && o === a) throw new I(\"Graph.\".concat(e, ': source & target are the same (\"').concat(o, \"\\\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.\"));\n    var p,\n      f,\n      l = t._nodes.get(o),\n      g = t._nodes.get(a);\n    if (!n && (p = t._edges.get(i))) {\n      if (!(p.source.key === o && p.target.key === a || r && p.source.key === a && p.target.key === o)) throw new I(\"Graph.\".concat(e, ': inconsistency detected when attempting to merge the \"').concat(i, '\" edge with \"').concat(o, '\" source & \"').concat(a, '\" target vs. (\"').concat(p.source.key, '\", \"').concat(p.target.key, '\").'));\n      f = p;\n    }\n    if (f || t.multi || !l || (f = r ? l.undirected[a] : l.out[a]), f) {\n      var y = [f.key, !1, !1, !1];\n      if (d ? !h : !c) return y;\n      if (d) {\n        var w = f.attributes;\n        f.attributes = h(w), t.emit(\"edgeAttributesUpdated\", {\n          type: \"replace\",\n          key: f.key,\n          attributes: f.attributes\n        });\n      } else u(f.attributes, c), t.emit(\"edgeAttributesUpdated\", {\n        type: \"merge\",\n        key: f.key,\n        attributes: f.attributes,\n        data: c\n      });\n      return y;\n    }\n    c = c || {}, d && h && (c = h(c));\n    var v = {\n      key: null,\n      undirected: r,\n      source: o,\n      target: a,\n      attributes: c\n    };\n    if (n) i = t._edgeKeyGenerator();else if (i = \"\" + i, t._edges.has(i)) throw new I(\"Graph.\".concat(e, ': the \"').concat(i, '\" edge already exists in the graph.'));\n    var b = !1,\n      m = !1;\n    l || (l = Ot(t, o, {}), b = !0, o === a && (g = l, m = !0)), g || (g = Ot(t, a, {}), m = !0), p = new V(r, i, l, g, c), t._edges.set(i, p);\n    var k = o === a;\n    return r ? (l.undirectedDegree++, g.undirectedDegree++, k && (l.undirectedLoops++, t._undirectedSelfLoopCount++)) : (l.outDegree++, g.inDegree++, k && (l.directedLoops++, t._directedSelfLoopCount++)), t.multi ? p.attachMulti() : p.attach(), r ? t._undirectedSize++ : t._directedSize++, v.key = i, t.emit(\"edgeAdded\", v), [i, !0, b, m];\n  }\n  function Mt(t, e) {\n    t._edges.delete(e.key);\n    var n = e.source,\n      r = e.target,\n      i = e.attributes,\n      o = e.undirected,\n      a = n === r;\n    o ? (n.undirectedDegree--, r.undirectedDegree--, a && (n.undirectedLoops--, t._undirectedSelfLoopCount--)) : (n.outDegree--, r.inDegree--, a && (n.directedLoops--, t._directedSelfLoopCount--)), t.multi ? e.detachMulti() : e.detach(), o ? t._undirectedSize-- : t._directedSize--, t.emit(\"edgeDropped\", {\n      key: e.key,\n      attributes: i,\n      source: n.key,\n      target: r.key,\n      undirected: o\n    });\n  }\n  var zt = function (n) {\n    function r(t) {\n      var e;\n      if (e = n.call(this) || this, \"boolean\" != typeof (t = u({}, Nt, t)).multi) throw new B(\"Graph.constructor: invalid 'multi' option. Expecting a boolean but got \\\"\".concat(t.multi, '\".'));\n      if (!Dt.has(t.type)) throw new B('Graph.constructor: invalid \\'type\\' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"'.concat(t.type, '\".'));\n      if (\"boolean\" != typeof t.allowSelfLoops) throw new B(\"Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \\\"\".concat(t.allowSelfLoops, '\".'));\n      var r = \"mixed\" === t.type ? Y : \"directed\" === t.type ? q : J;\n      p(c(e), \"NodeDataClass\", r);\n      var i = \"geid_\" + St() + \"_\",\n        o = 0;\n      return p(c(e), \"_attributes\", {}), p(c(e), \"_nodes\", new Map()), p(c(e), \"_edges\", new Map()), p(c(e), \"_directedSize\", 0), p(c(e), \"_undirectedSize\", 0), p(c(e), \"_directedSelfLoopCount\", 0), p(c(e), \"_undirectedSelfLoopCount\", 0), p(c(e), \"_edgeKeyGenerator\", function () {\n        var t;\n        do {\n          t = i + o++;\n        } while (e._edges.has(t));\n        return t;\n      }), p(c(e), \"_options\", t), Ut.forEach(function (t) {\n        return p(c(e), t, e[t]);\n      }), f(c(e), \"order\", function () {\n        return e._nodes.size;\n      }), f(c(e), \"size\", function () {\n        return e._edges.size;\n      }), f(c(e), \"directedSize\", function () {\n        return e._directedSize;\n      }), f(c(e), \"undirectedSize\", function () {\n        return e._undirectedSize;\n      }), f(c(e), \"selfLoopCount\", function () {\n        return e._directedSelfLoopCount + e._undirectedSelfLoopCount;\n      }), f(c(e), \"directedSelfLoopCount\", function () {\n        return e._directedSelfLoopCount;\n      }), f(c(e), \"undirectedSelfLoopCount\", function () {\n        return e._undirectedSelfLoopCount;\n      }), f(c(e), \"multi\", e._options.multi), f(c(e), \"type\", e._options.type), f(c(e), \"allowSelfLoops\", e._options.allowSelfLoops), f(c(e), \"implementation\", function () {\n        return \"graphology\";\n      }), e;\n    }\n    e(r, n);\n    var i = r.prototype;\n    return i._resetInstanceCounters = function () {\n      this._directedSize = 0, this._undirectedSize = 0, this._directedSelfLoopCount = 0, this._undirectedSelfLoopCount = 0;\n    }, i.hasNode = function (t) {\n      return this._nodes.has(\"\" + t);\n    }, i.hasDirectedEdge = function (t, e) {\n      if (\"undirected\" === this.type) return !1;\n      if (1 === arguments.length) {\n        var n = \"\" + t,\n          r = this._edges.get(n);\n        return !!r && !r.undirected;\n      }\n      if (2 === arguments.length) {\n        t = \"\" + t, e = \"\" + e;\n        var i = this._nodes.get(t);\n        return !!i && i.out.hasOwnProperty(e);\n      }\n      throw new B(\"Graph.hasDirectedEdge: invalid arity (\".concat(arguments.length, \", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.\"));\n    }, i.hasUndirectedEdge = function (t, e) {\n      if (\"directed\" === this.type) return !1;\n      if (1 === arguments.length) {\n        var n = \"\" + t,\n          r = this._edges.get(n);\n        return !!r && r.undirected;\n      }\n      if (2 === arguments.length) {\n        t = \"\" + t, e = \"\" + e;\n        var i = this._nodes.get(t);\n        return !!i && i.undirected.hasOwnProperty(e);\n      }\n      throw new B(\"Graph.hasDirectedEdge: invalid arity (\".concat(arguments.length, \", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.\"));\n    }, i.hasEdge = function (t, e) {\n      if (1 === arguments.length) {\n        var n = \"\" + t;\n        return this._edges.has(n);\n      }\n      if (2 === arguments.length) {\n        t = \"\" + t, e = \"\" + e;\n        var r = this._nodes.get(t);\n        return !!r && (void 0 !== r.out && r.out.hasOwnProperty(e) || void 0 !== r.undirected && r.undirected.hasOwnProperty(e));\n      }\n      throw new B(\"Graph.hasEdge: invalid arity (\".concat(arguments.length, \", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.\"));\n    }, i.directedEdge = function (t, e) {\n      if (\"undirected\" !== this.type) {\n        if (t = \"\" + t, e = \"\" + e, this.multi) throw new I(\"Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.\");\n        var n = this._nodes.get(t);\n        if (!n) throw new F('Graph.directedEdge: could not find the \"'.concat(t, '\" source node in the graph.'));\n        if (!this._nodes.has(e)) throw new F('Graph.directedEdge: could not find the \"'.concat(e, '\" target node in the graph.'));\n        var r = n.out && n.out[e] || void 0;\n        return r ? r.key : void 0;\n      }\n    }, i.undirectedEdge = function (t, e) {\n      if (\"directed\" !== this.type) {\n        if (t = \"\" + t, e = \"\" + e, this.multi) throw new I(\"Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.\");\n        var n = this._nodes.get(t);\n        if (!n) throw new F('Graph.undirectedEdge: could not find the \"'.concat(t, '\" source node in the graph.'));\n        if (!this._nodes.has(e)) throw new F('Graph.undirectedEdge: could not find the \"'.concat(e, '\" target node in the graph.'));\n        var r = n.undirected && n.undirected[e] || void 0;\n        return r ? r.key : void 0;\n      }\n    }, i.edge = function (t, e) {\n      if (this.multi) throw new I(\"Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.\");\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.edge: could not find the \"'.concat(t, '\" source node in the graph.'));\n      if (!this._nodes.has(e)) throw new F('Graph.edge: could not find the \"'.concat(e, '\" target node in the graph.'));\n      var r = n.out && n.out[e] || n.undirected && n.undirected[e] || void 0;\n      if (r) return r.key;\n    }, i.areDirectedNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areDirectedNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && (e in n.in || e in n.out);\n    }, i.areOutNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areOutNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && e in n.out;\n    }, i.areInNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areInNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && e in n.in;\n    }, i.areUndirectedNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areUndirectedNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"directed\" !== this.type && e in n.undirected;\n    }, i.areNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && (e in n.in || e in n.out) || \"directed\" !== this.type && e in n.undirected;\n    }, i.areInboundNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areInboundNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && e in n.in || \"directed\" !== this.type && e in n.undirected;\n    }, i.areOutboundNeighbors = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._nodes.get(t);\n      if (!n) throw new F('Graph.areOutboundNeighbors: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" !== this.type && e in n.out || \"directed\" !== this.type && e in n.undirected;\n    }, i.inDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.inDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.inDegree;\n    }, i.outDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.outDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.outDegree;\n    }, i.directedDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.directedDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.inDegree + e.outDegree;\n    }, i.undirectedDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.undirectedDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"directed\" === this.type ? 0 : e.undirectedDegree;\n    }, i.inboundDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.inboundDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree), \"undirected\" !== this.type && (n += e.inDegree), n;\n    }, i.outboundDegree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.outboundDegree: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree), \"undirected\" !== this.type && (n += e.outDegree), n;\n    }, i.degree = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.degree: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree), \"undirected\" !== this.type && (n += e.inDegree + e.outDegree), n;\n    }, i.inDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.inDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.inDegree - e.directedLoops;\n    }, i.outDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.outDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.outDegree - e.directedLoops;\n    }, i.directedDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.directedDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"undirected\" === this.type ? 0 : e.inDegree + e.outDegree - 2 * e.directedLoops;\n    }, i.undirectedDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.undirectedDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      return \"directed\" === this.type ? 0 : e.undirectedDegree - 2 * e.undirectedLoops;\n    }, i.inboundDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.inboundDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0,\n        r = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree, r += 2 * e.undirectedLoops), \"undirected\" !== this.type && (n += e.inDegree, r += e.directedLoops), n - r;\n    }, i.outboundDegreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.outboundDegreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0,\n        r = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree, r += 2 * e.undirectedLoops), \"undirected\" !== this.type && (n += e.outDegree, r += e.directedLoops), n - r;\n    }, i.degreeWithoutSelfLoops = function (t) {\n      t = \"\" + t;\n      var e = this._nodes.get(t);\n      if (!e) throw new F('Graph.degreeWithoutSelfLoops: could not find the \"'.concat(t, '\" node in the graph.'));\n      var n = 0,\n        r = 0;\n      return \"directed\" !== this.type && (n += e.undirectedDegree, r += 2 * e.undirectedLoops), \"undirected\" !== this.type && (n += e.inDegree + e.outDegree, r += 2 * e.directedLoops), n - r;\n    }, i.source = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.source: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return e.source.key;\n    }, i.target = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.target: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return e.target.key;\n    }, i.extremities = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.extremities: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return [e.source.key, e.target.key];\n    }, i.opposite = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._edges.get(e);\n      if (!n) throw new F('Graph.opposite: could not find the \"'.concat(e, '\" edge in the graph.'));\n      var r = n.source.key,\n        i = n.target.key;\n      if (t === r) return i;\n      if (t === i) return r;\n      throw new F('Graph.opposite: the \"'.concat(t, '\" node is not attached to the \"').concat(e, '\" edge (').concat(r, \", \").concat(i, \").\"));\n    }, i.hasExtremity = function (t, e) {\n      t = \"\" + t, e = \"\" + e;\n      var n = this._edges.get(t);\n      if (!n) throw new F('Graph.hasExtremity: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return n.source.key === e || n.target.key === e;\n    }, i.isUndirected = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.isUndirected: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return e.undirected;\n    }, i.isDirected = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.isDirected: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return !e.undirected;\n    }, i.isSelfLoop = function (t) {\n      t = \"\" + t;\n      var e = this._edges.get(t);\n      if (!e) throw new F('Graph.isSelfLoop: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return e.source === e.target;\n    }, i.addNode = function (t, e) {\n      var n = function (t, e, n) {\n        if (n && !s(n)) throw new B('Graph.addNode: invalid attributes. Expecting an object but got \"'.concat(n, '\"'));\n        if (e = \"\" + e, n = n || {}, t._nodes.has(e)) throw new I('Graph.addNode: the \"'.concat(e, '\" node already exist in the graph.'));\n        var r = new t.NodeDataClass(e, n);\n        return t._nodes.set(e, r), t.emit(\"nodeAdded\", {\n          key: e,\n          attributes: n\n        }), r;\n      }(this, t, e);\n      return n.key;\n    }, i.mergeNode = function (t, e) {\n      if (e && !s(e)) throw new B('Graph.mergeNode: invalid attributes. Expecting an object but got \"'.concat(e, '\"'));\n      t = \"\" + t, e = e || {};\n      var n = this._nodes.get(t);\n      return n ? (e && (u(n.attributes, e), this.emit(\"nodeAttributesUpdated\", {\n        type: \"merge\",\n        key: t,\n        attributes: n.attributes,\n        data: e\n      })), [t, !1]) : (n = new this.NodeDataClass(t, e), this._nodes.set(t, n), this.emit(\"nodeAdded\", {\n        key: t,\n        attributes: e\n      }), [t, !0]);\n    }, i.updateNode = function (t, e) {\n      if (e && \"function\" != typeof e) throw new B('Graph.updateNode: invalid updater function. Expecting a function but got \"'.concat(e, '\"'));\n      t = \"\" + t;\n      var n = this._nodes.get(t);\n      if (n) {\n        if (e) {\n          var r = n.attributes;\n          n.attributes = e(r), this.emit(\"nodeAttributesUpdated\", {\n            type: \"replace\",\n            key: t,\n            attributes: n.attributes\n          });\n        }\n        return [t, !1];\n      }\n      var i = e ? e({}) : {};\n      return n = new this.NodeDataClass(t, i), this._nodes.set(t, n), this.emit(\"nodeAdded\", {\n        key: t,\n        attributes: i\n      }), [t, !0];\n    }, i.dropNode = function (t) {\n      t = \"\" + t;\n      var e,\n        n = this._nodes.get(t);\n      if (!n) throw new F('Graph.dropNode: could not find the \"'.concat(t, '\" node in the graph.'));\n      if (\"undirected\" !== this.type) {\n        for (var r in n.out) {\n          e = n.out[r];\n          do {\n            Mt(this, e), e = e.next;\n          } while (e);\n        }\n        for (var i in n.in) {\n          e = n.in[i];\n          do {\n            Mt(this, e), e = e.next;\n          } while (e);\n        }\n      }\n      if (\"directed\" !== this.type) for (var o in n.undirected) {\n        e = n.undirected[o];\n        do {\n          Mt(this, e), e = e.next;\n        } while (e);\n      }\n      this._nodes.delete(t), this.emit(\"nodeDropped\", {\n        key: t,\n        attributes: n.attributes\n      });\n    }, i.dropEdge = function (t) {\n      var e;\n      if (arguments.length > 1) {\n        var n = \"\" + arguments[0],\n          r = \"\" + arguments[1];\n        if (!(e = d(this, n, r, this.type))) throw new F('Graph.dropEdge: could not find the \"'.concat(n, '\" -> \"').concat(r, '\" edge in the graph.'));\n      } else if (t = \"\" + t, !(e = this._edges.get(t))) throw new F('Graph.dropEdge: could not find the \"'.concat(t, '\" edge in the graph.'));\n      return Mt(this, e), this;\n    }, i.dropDirectedEdge = function (t, e) {\n      if (arguments.length < 2) throw new I(\"Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.\");\n      if (this.multi) throw new I(\"Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.\");\n      var n = d(this, t = \"\" + t, e = \"\" + e, \"directed\");\n      if (!n) throw new F('Graph.dropDirectedEdge: could not find a \"'.concat(t, '\" -> \"').concat(e, '\" edge in the graph.'));\n      return Mt(this, n), this;\n    }, i.dropUndirectedEdge = function (t, e) {\n      if (arguments.length < 2) throw new I(\"Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.\");\n      if (this.multi) throw new I(\"Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.\");\n      var n = d(this, t, e, \"undirected\");\n      if (!n) throw new F('Graph.dropUndirectedEdge: could not find a \"'.concat(t, '\" -> \"').concat(e, '\" edge in the graph.'));\n      return Mt(this, n), this;\n    }, i.clear = function () {\n      this._edges.clear(), this._nodes.clear(), this._resetInstanceCounters(), this.emit(\"cleared\");\n    }, i.clearEdges = function () {\n      for (var t, e = this._nodes.values(); !0 !== (t = e.next()).done;) {\n        t.value.clear();\n      }\n      this._edges.clear(), this._resetInstanceCounters(), this.emit(\"edgesCleared\");\n    }, i.getAttribute = function (t) {\n      return this._attributes[t];\n    }, i.getAttributes = function () {\n      return this._attributes;\n    }, i.hasAttribute = function (t) {\n      return this._attributes.hasOwnProperty(t);\n    }, i.setAttribute = function (t, e) {\n      return this._attributes[t] = e, this.emit(\"attributesUpdated\", {\n        type: \"set\",\n        attributes: this._attributes,\n        name: t\n      }), this;\n    }, i.updateAttribute = function (t, e) {\n      if (\"function\" != typeof e) throw new B(\"Graph.updateAttribute: updater should be a function.\");\n      var n = this._attributes[t];\n      return this._attributes[t] = e(n), this.emit(\"attributesUpdated\", {\n        type: \"set\",\n        attributes: this._attributes,\n        name: t\n      }), this;\n    }, i.removeAttribute = function (t) {\n      return delete this._attributes[t], this.emit(\"attributesUpdated\", {\n        type: \"remove\",\n        attributes: this._attributes,\n        name: t\n      }), this;\n    }, i.replaceAttributes = function (t) {\n      if (!s(t)) throw new B(\"Graph.replaceAttributes: provided attributes are not a plain object.\");\n      return this._attributes = t, this.emit(\"attributesUpdated\", {\n        type: \"replace\",\n        attributes: this._attributes\n      }), this;\n    }, i.mergeAttributes = function (t) {\n      if (!s(t)) throw new B(\"Graph.mergeAttributes: provided attributes are not a plain object.\");\n      return u(this._attributes, t), this.emit(\"attributesUpdated\", {\n        type: \"merge\",\n        attributes: this._attributes,\n        data: t\n      }), this;\n    }, i.updateAttributes = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.updateAttributes: provided updater is not a function.\");\n      return this._attributes = t(this._attributes), this.emit(\"attributesUpdated\", {\n        type: \"update\",\n        attributes: this._attributes\n      }), this;\n    }, i.updateEachNodeAttributes = function (t, e) {\n      if (\"function\" != typeof t) throw new B(\"Graph.updateEachNodeAttributes: expecting an updater function.\");\n      if (e && !l(e)) throw new B(\"Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}\");\n      for (var n, r, i = this._nodes.values(); !0 !== (n = i.next()).done;) {\n        (r = n.value).attributes = t(r.key, r.attributes);\n      }\n      this.emit(\"eachNodeAttributesUpdated\", {\n        hints: e || null\n      });\n    }, i.updateEachEdgeAttributes = function (t, e) {\n      if (\"function\" != typeof t) throw new B(\"Graph.updateEachEdgeAttributes: expecting an updater function.\");\n      if (e && !l(e)) throw new B(\"Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}\");\n      for (var n, r, i, o, a = this._edges.values(); !0 !== (n = a.next()).done;) {\n        i = (r = n.value).source, o = r.target, r.attributes = t(r.key, r.attributes, i.key, o.key, i.attributes, o.attributes, r.undirected);\n      }\n      this.emit(\"eachEdgeAttributesUpdated\", {\n        hints: e || null\n      });\n    }, i.forEachAdjacencyEntry = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.forEachAdjacencyEntry: expecting a callback.\");\n      xt(!1, !1, !1, this, t);\n    }, i.forEachAdjacencyEntryWithOrphans = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.\");\n      xt(!1, !1, !0, this, t);\n    }, i.forEachAssymetricAdjacencyEntry = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.forEachAssymetricAdjacencyEntry: expecting a callback.\");\n      xt(!1, !0, !1, this, t);\n    }, i.forEachAssymetricAdjacencyEntryWithOrphans = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.\");\n      xt(!1, !0, !0, this, t);\n    }, i.nodes = function () {\n      return \"function\" == typeof Array.from ? Array.from(this._nodes.keys()) : K(this._nodes.keys(), this._nodes.size);\n    }, i.forEachNode = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.forEachNode: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(); !0 !== (e = r.next()).done;) {\n        t((n = e.value).key, n.attributes);\n      }\n    }, i.findNode = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.findNode: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(); !0 !== (e = r.next()).done;) {\n        if (t((n = e.value).key, n.attributes)) return n.key;\n      }\n    }, i.mapNodes = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.mapNode: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(), i = new Array(this.order), o = 0; !0 !== (e = r.next()).done;) {\n        n = e.value, i[o++] = t(n.key, n.attributes);\n      }\n      return i;\n    }, i.someNode = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.someNode: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(); !0 !== (e = r.next()).done;) {\n        if (t((n = e.value).key, n.attributes)) return !0;\n      }\n      return !1;\n    }, i.everyNode = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.everyNode: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(); !0 !== (e = r.next()).done;) {\n        if (!t((n = e.value).key, n.attributes)) return !1;\n      }\n      return !0;\n    }, i.filterNodes = function (t) {\n      if (\"function\" != typeof t) throw new B(\"Graph.filterNodes: expecting a callback.\");\n      for (var e, n, r = this._nodes.values(), i = []; !0 !== (e = r.next()).done;) {\n        t((n = e.value).key, n.attributes) && i.push(n.key);\n      }\n      return i;\n    }, i.reduceNodes = function (t, e) {\n      if (\"function\" != typeof t) throw new B(\"Graph.reduceNodes: expecting a callback.\");\n      if (arguments.length < 2) throw new B(\"Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.\");\n      for (var n, r, i = e, o = this._nodes.values(); !0 !== (n = o.next()).done;) {\n        i = t(i, (r = n.value).key, r.attributes);\n      }\n      return i;\n    }, i.nodeEntries = function () {\n      var t = this._nodes.values();\n      return new O(function () {\n        var e = t.next();\n        if (e.done) return e;\n        var n = e.value;\n        return {\n          value: {\n            node: n.key,\n            attributes: n.attributes\n          },\n          done: !1\n        };\n      });\n    }, i.export = function () {\n      var t = this,\n        e = new Array(this._nodes.size),\n        n = 0;\n      this._nodes.forEach(function (t, r) {\n        e[n++] = function (t, e) {\n          var n = {\n            key: t\n          };\n          return h(e.attributes) || (n.attributes = u({}, e.attributes)), n;\n        }(r, t);\n      });\n      var r = new Array(this._edges.size);\n      return n = 0, this._edges.forEach(function (e, i) {\n        r[n++] = function (t, e, n) {\n          var r = {\n            key: e,\n            source: n.source.key,\n            target: n.target.key\n          };\n          return h(n.attributes) || (r.attributes = u({}, n.attributes)), \"mixed\" === t && n.undirected && (r.undirected = !0), r;\n        }(t.type, i, e);\n      }), {\n        options: {\n          type: this.type,\n          multi: this.multi,\n          allowSelfLoops: this.allowSelfLoops\n        },\n        attributes: this.getAttributes(),\n        nodes: e,\n        edges: r\n      };\n    }, i.import = function (t) {\n      var e,\n        n,\n        i,\n        o,\n        a,\n        c = this,\n        u = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      if (t instanceof r) return t.forEachNode(function (t, e) {\n        u ? c.mergeNode(t, e) : c.addNode(t, e);\n      }), t.forEachEdge(function (t, e, n, r, i, o, a) {\n        u ? a ? c.mergeUndirectedEdgeWithKey(t, n, r, e) : c.mergeDirectedEdgeWithKey(t, n, r, e) : a ? c.addUndirectedEdgeWithKey(t, n, r, e) : c.addDirectedEdgeWithKey(t, n, r, e);\n      }), this;\n      if (!s(t)) throw new B(\"Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.\");\n      if (t.attributes) {\n        if (!s(t.attributes)) throw new B(\"Graph.import: invalid attributes. Expecting a plain object.\");\n        u ? this.mergeAttributes(t.attributes) : this.replaceAttributes(t.attributes);\n      }\n      if (t.nodes) {\n        if (i = t.nodes, !Array.isArray(i)) throw new B(\"Graph.import: invalid nodes. Expecting an array.\");\n        for (e = 0, n = i.length; e < n; e++) {\n          Et(o = i[e]);\n          var d = o,\n            h = d.key,\n            p = d.attributes;\n          u ? this.mergeNode(h, p) : this.addNode(h, p);\n        }\n      }\n      if (t.edges) {\n        var f = !1;\n        if (\"undirected\" === this.type && (f = !0), i = t.edges, !Array.isArray(i)) throw new B(\"Graph.import: invalid edges. Expecting an array.\");\n        for (e = 0, n = i.length; e < n; e++) {\n          At(a = i[e]);\n          var l = a,\n            g = l.source,\n            y = l.target,\n            w = l.attributes,\n            v = l.undirected,\n            b = void 0 === v ? f : v;\n          \"key\" in a ? (u ? b ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey : b ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey).call(this, a.key, g, y, w) : (u ? b ? this.mergeUndirectedEdge : this.mergeDirectedEdge : b ? this.addUndirectedEdge : this.addDirectedEdge).call(this, g, y, w);\n        }\n      }\n      return this;\n    }, i.nullCopy = function (t) {\n      var e = new r(u({}, this._options, t));\n      return e.replaceAttributes(u({}, this.getAttributes())), e;\n    }, i.emptyCopy = function (t) {\n      var e = this.nullCopy(t);\n      return this._nodes.forEach(function (t, n) {\n        var r = u({}, t.attributes);\n        t = new e.NodeDataClass(n, r), e._nodes.set(n, t);\n      }), e;\n    }, i.copy = function (t) {\n      if (\"string\" == typeof (t = t || {}).type && t.type !== this.type && \"mixed\" !== t.type) throw new I('Graph.copy: cannot create an incompatible copy from \"'.concat(this.type, '\" type to \"').concat(t.type, '\" because this would mean losing information about the current graph.'));\n      if (\"boolean\" == typeof t.multi && t.multi !== this.multi && !0 !== t.multi) throw new I(\"Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.\");\n      if (\"boolean\" == typeof t.allowSelfLoops && t.allowSelfLoops !== this.allowSelfLoops && !0 !== t.allowSelfLoops) throw new I(\"Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.\");\n      for (var e, n, r = this.emptyCopy(t), i = this._edges.values(); !0 !== (e = i.next()).done;) {\n        jt(r, \"copy\", !1, (n = e.value).undirected, n.key, n.source.key, n.target.key, u({}, n.attributes));\n      }\n      return r;\n    }, i.toJSON = function () {\n      return this.export();\n    }, i.toString = function () {\n      return \"[object Graph]\";\n    }, i.inspect = function () {\n      var e = this,\n        n = {};\n      this._nodes.forEach(function (t, e) {\n        n[e] = t.attributes;\n      });\n      var r = {},\n        i = {};\n      this._edges.forEach(function (t, n) {\n        var o,\n          a = t.undirected ? \"--\" : \"->\",\n          c = \"\",\n          u = t.source.key,\n          d = t.target.key;\n        t.undirected && u > d && (o = u, u = d, d = o);\n        var s = \"(\".concat(u, \")\").concat(a, \"(\").concat(d, \")\");\n        n.startsWith(\"geid_\") ? e.multi && (void 0 === i[s] ? i[s] = 0 : i[s]++, c += \"\".concat(i[s], \". \")) : c += \"[\".concat(n, \"]: \"), r[c += s] = t.attributes;\n      });\n      var o = {};\n      for (var a in this) {\n        this.hasOwnProperty(a) && !Ut.has(a) && \"function\" != typeof this[a] && \"symbol\" !== t(a) && (o[a] = this[a]);\n      }\n      return o.attributes = this._attributes, o.nodes = n, o.edges = r, p(o, \"constructor\", this.constructor), o;\n    }, r;\n  }(y.exports.EventEmitter);\n  \"undefined\" != typeof Symbol && (zt.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = zt.prototype.inspect), [{\n    name: function name(t) {\n      return \"\".concat(t, \"Edge\");\n    },\n    generateKey: !0\n  }, {\n    name: function name(t) {\n      return \"\".concat(t, \"DirectedEdge\");\n    },\n    generateKey: !0,\n    type: \"directed\"\n  }, {\n    name: function name(t) {\n      return \"\".concat(t, \"UndirectedEdge\");\n    },\n    generateKey: !0,\n    type: \"undirected\"\n  }, {\n    name: function name(t) {\n      return \"\".concat(t, \"EdgeWithKey\");\n    }\n  }, {\n    name: function name(t) {\n      return \"\".concat(t, \"DirectedEdgeWithKey\");\n    },\n    type: \"directed\"\n  }, {\n    name: function name(t) {\n      return \"\".concat(t, \"UndirectedEdgeWithKey\");\n    },\n    type: \"undirected\"\n  }].forEach(function (t) {\n    [\"add\", \"merge\", \"update\"].forEach(function (e) {\n      var n = t.name(e),\n        r = \"add\" === e ? jt : Ct;\n      t.generateKey ? zt.prototype[n] = function (i, o, a) {\n        return r(this, n, !0, \"undirected\" === (t.type || this.type), null, i, o, a, \"update\" === e);\n      } : zt.prototype[n] = function (i, o, a, c) {\n        return r(this, n, !1, \"undirected\" === (t.type || this.type), i, o, a, c, \"update\" === e);\n      };\n    });\n  }), function (t) {\n    Q.forEach(function (e) {\n      var n = e.name,\n        r = e.attacher;\n      r(t, n(\"Node\"), 0), r(t, n(\"Source\"), 1), r(t, n(\"Target\"), 2), r(t, n(\"Opposite\"), 3);\n    });\n  }(zt), function (t) {\n    X.forEach(function (e) {\n      var n = e.name,\n        r = e.attacher;\n      r(t, n(\"Edge\"), \"mixed\"), r(t, n(\"DirectedEdge\"), \"directed\"), r(t, n(\"UndirectedEdge\"), \"undirected\");\n    });\n  }(zt), function (t) {\n    et.forEach(function (e) {\n      !function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction;\n        t.prototype[n] = function (t, e) {\n          if (\"mixed\" !== r && \"mixed\" !== this.type && r !== this.type) return [];\n          if (!arguments.length) return ut(this, r);\n          if (1 === arguments.length) {\n            t = \"\" + t;\n            var o = this._nodes.get(t);\n            if (void 0 === o) throw new F(\"Graph.\".concat(n, ': could not find the \"').concat(t, '\" node in the graph.'));\n            return pt(this.multi, \"mixed\" === r ? this.type : r, i, o);\n          }\n          if (2 === arguments.length) {\n            t = \"\" + t, e = \"\" + e;\n            var a = this._nodes.get(t);\n            if (!a) throw new F(\"Graph.\".concat(n, ':  could not find the \"').concat(t, '\" source node in the graph.'));\n            if (!this._nodes.has(e)) throw new F(\"Graph.\".concat(n, ':  could not find the \"').concat(e, '\" target node in the graph.'));\n            return gt(r, this.multi, i, a, e);\n          }\n          throw new B(\"Graph.\".concat(n, \": too many arguments (expecting 0, 1 or 2 and got \").concat(arguments.length, \").\"));\n        };\n      }(t, e), function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction,\n          o = \"forEach\" + n[0].toUpperCase() + n.slice(1, -1);\n        t.prototype[o] = function (t, e, n) {\n          if (\"mixed\" === r || \"mixed\" === this.type || r === this.type) {\n            if (1 === arguments.length) return dt(!1, this, r, n = t);\n            if (2 === arguments.length) {\n              t = \"\" + t, n = e;\n              var a = this._nodes.get(t);\n              if (void 0 === a) throw new F(\"Graph.\".concat(o, ': could not find the \"').concat(t, '\" node in the graph.'));\n              return ht(!1, this.multi, \"mixed\" === r ? this.type : r, i, a, n);\n            }\n            if (3 === arguments.length) {\n              t = \"\" + t, e = \"\" + e;\n              var c = this._nodes.get(t);\n              if (!c) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(t, '\" source node in the graph.'));\n              if (!this._nodes.has(e)) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(e, '\" target node in the graph.'));\n              return lt(!1, r, this.multi, i, c, e, n);\n            }\n            throw new B(\"Graph.\".concat(o, \": too many arguments (expecting 1, 2 or 3 and got \").concat(arguments.length, \").\"));\n          }\n        };\n        var a = \"map\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[a] = function () {\n          var t,\n            e = Array.prototype.slice.call(arguments),\n            n = e.pop();\n          if (0 === e.length) {\n            var i = 0;\n            \"directed\" !== r && (i += this.undirectedSize), \"undirected\" !== r && (i += this.directedSize), t = new Array(i);\n            var a = 0;\n            e.push(function (e, r, i, o, c, u, d) {\n              t[a++] = n(e, r, i, o, c, u, d);\n            });\n          } else t = [], e.push(function (e, r, i, o, a, c, u) {\n            t.push(n(e, r, i, o, a, c, u));\n          });\n          return this[o].apply(this, e), t;\n        };\n        var c = \"filter\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[c] = function () {\n          var t = Array.prototype.slice.call(arguments),\n            e = t.pop(),\n            n = [];\n          return t.push(function (t, r, i, o, a, c, u) {\n            e(t, r, i, o, a, c, u) && n.push(t);\n          }), this[o].apply(this, t), n;\n        };\n        var u = \"reduce\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[u] = function () {\n          var t,\n            e,\n            n = Array.prototype.slice.call(arguments);\n          if (n.length < 2 || n.length > 4) throw new B(\"Graph.\".concat(u, \": invalid number of arguments (expecting 2, 3 or 4 and got \").concat(n.length, \").\"));\n          if (\"function\" == typeof n[n.length - 1] && \"function\" != typeof n[n.length - 2]) throw new B(\"Graph.\".concat(u, \": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.\"));\n          2 === n.length ? (t = n[0], e = n[1], n = []) : 3 === n.length ? (t = n[1], e = n[2], n = [n[0]]) : 4 === n.length && (t = n[2], e = n[3], n = [n[0], n[1]]);\n          var r = e;\n          return n.push(function (e, n, i, o, a, c, u) {\n            r = t(r, e, n, i, o, a, c, u);\n          }), this[o].apply(this, n), r;\n        };\n      }(t, e), function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction,\n          o = \"find\" + n[0].toUpperCase() + n.slice(1, -1);\n        t.prototype[o] = function (t, e, n) {\n          if (\"mixed\" !== r && \"mixed\" !== this.type && r !== this.type) return !1;\n          if (1 === arguments.length) return dt(!0, this, r, n = t);\n          if (2 === arguments.length) {\n            t = \"\" + t, n = e;\n            var a = this._nodes.get(t);\n            if (void 0 === a) throw new F(\"Graph.\".concat(o, ': could not find the \"').concat(t, '\" node in the graph.'));\n            return ht(!0, this.multi, \"mixed\" === r ? this.type : r, i, a, n);\n          }\n          if (3 === arguments.length) {\n            t = \"\" + t, e = \"\" + e;\n            var c = this._nodes.get(t);\n            if (!c) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(t, '\" source node in the graph.'));\n            if (!this._nodes.has(e)) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(e, '\" target node in the graph.'));\n            return lt(!0, r, this.multi, i, c, e, n);\n          }\n          throw new B(\"Graph.\".concat(o, \": too many arguments (expecting 1, 2 or 3 and got \").concat(arguments.length, \").\"));\n        };\n        var a = \"some\" + n[0].toUpperCase() + n.slice(1, -1);\n        t.prototype[a] = function () {\n          var t = Array.prototype.slice.call(arguments),\n            e = t.pop();\n          return t.push(function (t, n, r, i, o, a, c) {\n            return e(t, n, r, i, o, a, c);\n          }), !!this[o].apply(this, t);\n        };\n        var c = \"every\" + n[0].toUpperCase() + n.slice(1, -1);\n        t.prototype[c] = function () {\n          var t = Array.prototype.slice.call(arguments),\n            e = t.pop();\n          return t.push(function (t, n, r, i, o, a, c) {\n            return !e(t, n, r, i, o, a, c);\n          }), !this[o].apply(this, t);\n        };\n      }(t, e), function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction,\n          o = n.slice(0, -1) + \"Entries\";\n        t.prototype[o] = function (t, e) {\n          if (\"mixed\" !== r && \"mixed\" !== this.type && r !== this.type) return O.empty();\n          if (!arguments.length) return st(this, r);\n          if (1 === arguments.length) {\n            t = \"\" + t;\n            var n = this._nodes.get(t);\n            if (!n) throw new F(\"Graph.\".concat(o, ': could not find the \"').concat(t, '\" node in the graph.'));\n            return ft(r, i, n);\n          }\n          if (2 === arguments.length) {\n            t = \"\" + t, e = \"\" + e;\n            var a = this._nodes.get(t);\n            if (!a) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(t, '\" source node in the graph.'));\n            if (!this._nodes.has(e)) throw new F(\"Graph.\".concat(o, ':  could not find the \"').concat(e, '\" target node in the graph.'));\n            return yt(r, i, a, e);\n          }\n          throw new B(\"Graph.\".concat(o, \": too many arguments (expecting 0, 1 or 2 and got \").concat(arguments.length, \").\"));\n        };\n      }(t, e);\n    });\n  }(zt), function (t) {\n    wt.forEach(function (e) {\n      _t(t, e), function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction,\n          o = \"forEach\" + n[0].toUpperCase() + n.slice(1, -1);\n        t.prototype[o] = function (t, e) {\n          if (\"mixed\" === r || \"mixed\" === this.type || r === this.type) {\n            t = \"\" + t;\n            var n = this._nodes.get(t);\n            if (void 0 === n) throw new F(\"Graph.\".concat(o, ': could not find the \"').concat(t, '\" node in the graph.'));\n            mt(!1, \"mixed\" === r ? this.type : r, i, n, e);\n          }\n        };\n        var a = \"map\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[a] = function (t, e) {\n          var n = [];\n          return this[o](t, function (t, r) {\n            n.push(e(t, r));\n          }), n;\n        };\n        var c = \"filter\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[c] = function (t, e) {\n          var n = [];\n          return this[o](t, function (t, r) {\n            e(t, r) && n.push(t);\n          }), n;\n        };\n        var u = \"reduce\" + n[0].toUpperCase() + n.slice(1);\n        t.prototype[u] = function (t, e, n) {\n          if (arguments.length < 3) throw new B(\"Graph.\".concat(u, \": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.\"));\n          var r = n;\n          return this[o](t, function (t, n) {\n            r = e(r, t, n);\n          }), r;\n        };\n      }(t, e), function (t, e) {\n        var n = e.name,\n          r = e.type,\n          i = e.direction,\n          o = n[0].toUpperCase() + n.slice(1, -1),\n          a = \"find\" + o;\n        t.prototype[a] = function (t, e) {\n          if (\"mixed\" === r || \"mixed\" === this.type || r === this.type) {\n            t = \"\" + t;\n            var n = this._nodes.get(t);\n            if (void 0 === n) throw new F(\"Graph.\".concat(a, ': could not find the \"').concat(t, '\" node in the graph.'));\n            return mt(!0, \"mixed\" === r ? this.type : r, i, n, e);\n          }\n        };\n        var c = \"some\" + o;\n        t.prototype[c] = function (t, e) {\n          return !!this[a](t, e);\n        };\n        var u = \"every\" + o;\n        t.prototype[u] = function (t, e) {\n          return !this[a](t, function (t, n) {\n            return !e(t, n);\n          });\n        };\n      }(t, e), Gt(t, e);\n    });\n  }(zt);\n  var Wt = function (t) {\n      function n(e) {\n        var n = u({\n          type: \"directed\"\n        }, e);\n        if (\"multi\" in n && !1 !== n.multi) throw new B(\"DirectedGraph.from: inconsistent indication that the graph should be multi in given options!\");\n        if (\"directed\" !== n.type) throw new B('DirectedGraph.from: inconsistent \"' + n.type + '\" type in given options!');\n        return t.call(this, n) || this;\n      }\n      return e(n, t), n;\n    }(zt),\n    Pt = function (t) {\n      function n(e) {\n        var n = u({\n          type: \"undirected\"\n        }, e);\n        if (\"multi\" in n && !1 !== n.multi) throw new B(\"UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!\");\n        if (\"undirected\" !== n.type) throw new B('UndirectedGraph.from: inconsistent \"' + n.type + '\" type in given options!');\n        return t.call(this, n) || this;\n      }\n      return e(n, t), n;\n    }(zt),\n    Rt = function (t) {\n      function n(e) {\n        var n = u({\n          multi: !0\n        }, e);\n        if (\"multi\" in n && !0 !== n.multi) throw new B(\"MultiGraph.from: inconsistent indication that the graph should be simple in given options!\");\n        return t.call(this, n) || this;\n      }\n      return e(n, t), n;\n    }(zt),\n    Kt = function (t) {\n      function n(e) {\n        var n = u({\n          type: \"directed\",\n          multi: !0\n        }, e);\n        if (\"multi\" in n && !0 !== n.multi) throw new B(\"MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!\");\n        if (\"directed\" !== n.type) throw new B('MultiDirectedGraph.from: inconsistent \"' + n.type + '\" type in given options!');\n        return t.call(this, n) || this;\n      }\n      return e(n, t), n;\n    }(zt),\n    Tt = function (t) {\n      function n(e) {\n        var n = u({\n          type: \"undirected\",\n          multi: !0\n        }, e);\n        if (\"multi\" in n && !0 !== n.multi) throw new B(\"MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!\");\n        if (\"undirected\" !== n.type) throw new B('MultiUndirectedGraph.from: inconsistent \"' + n.type + '\" type in given options!');\n        return t.call(this, n) || this;\n      }\n      return e(n, t), n;\n    }(zt);\n  function Bt(t) {\n    t.from = function (e, n) {\n      var r = u({}, e.options, n),\n        i = new t(r);\n      return i.import(e), i;\n    };\n  }\n  return Bt(zt), Bt(Wt), Bt(Pt), Bt(Rt), Bt(Kt), Bt(Tt), zt.Graph = zt, zt.DirectedGraph = Wt, zt.UndirectedGraph = Pt, zt.MultiGraph = Rt, zt.MultiDirectedGraph = Kt, zt.MultiUndirectedGraph = Tt, zt.InvalidArgumentsGraphError = B, zt.NotFoundGraphError = F, zt.UsageGraphError = I, zt;\n});","map":{"version":3,"mappings":"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","names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","_typeof","constructor","Object","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","this","eventsModule","exports","events","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","eventTargetAgnosticAddListener","once","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","Iterator","next","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","Symbol","iterator","Iterator$2","of","done","empty","fromSequence","sequence","is","support","ArrayBuffer","require$$0","require$$1","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","iter","isView","iterOrNull","take","iterable","step","Infinity","array","GraphError","_this","_Error","_inheritsLoose","_wrapNativeSuper","InvalidArgumentsGraphError","_this2","captureStackTrace","NotFoundGraphError","_this3","UsageGraphError","_this4","MixedNodeData","clear","DirectedNodeData","UndirectedNodeData","EdgeData","inDegree","outDegree","undirectedDegree","undirectedLoops","directedLoops","in","attach","outKey","inKey","attachMulti","adj","head","previous","detach","detachMulti","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","NODE_ATTRIBUTES_METHODS","element","attacher","Class","data","_findRelevantNodeData","_findRelevantNodeData3","hasOwnProperty","_findRelevantNodeData4","_findRelevantNodeData5","updater","_findRelevantNodeData6","_findRelevantNodeData7","_findRelevantNodeData8","_findRelevantNodeData9","EDGE_ATTRIBUTES_METHODS","multi","chain","iterables","current","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","createEdgeArray","size","from","undirectedSize","directedSize","mask","values","forEachEdge","shouldFilter","createEdgeIterator","forEachEdgeForNode","found","fn","createEdgeArrayForNode","edges","createEdgeIteratorForNode","forEachEdgeForPath","createEdgeArrayForPath","createEdgeIteratorForPath","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","forEachInObjectOnce","visited","neighborData","has","forEachNeighbor","wrap","createDedupedObjectIterator","neighbor","attachNeighborArrayCreator","description","node","neighbors","createNeighborArrayForNode","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","Math","floor","random","TYPES","Set","EMITTER_PROPS","DEFAULTS","allowSelfLoops","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","delete","Graph","options","_EventEmitter","_assertThisInitialized","instancePrefix","edgeId","Map","availableEdgeKey","forEach","prop","_options","_proto","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","loops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","addNode","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","result","order","someNode","everyNode","filterNodes","reduceNodes","initialValue","accumulator","nodeEntries","serialized","serializeNode","serializeEdge","import","merge","a","e","s","t","_sa","_ta","u","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","undirectedByDefault","_edge$undirected","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","toJSON","toString","inspect","multiIndex","tmp","label","desc","startsWith","dummy","verb","generateKey","_ref","attachNodeAttributesMethods","attachEdgeAttributesMethods","attachEdgeArrayCreator","forEachName","toUpperCase","mapName","ea","sa","ta","filterName","reduceName","attachForEachEdge","findEdgeName","someName","everyName","attachFindEdge","originalName","attachEdgeIteratorCreator","attachEdgeIterationMethods","attachForEachNeighbor","capitalizedSingular","findName","attachFindNeighbor","attachNeighborIterationMethods","DirectedGraph","finalOptions","_Graph","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"sources":["../src/utils.js","../../../node_modules/events/events.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/iter.js","../../../node_modules/obliterator/take.js","../src/errors.js","../src/data.js","../src/attributes/nodes.js","../src/attributes/edges.js","../../../node_modules/obliterator/chain.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  return (\n    typeof value === 'object' && value !== null && value.constructor === Object\n  );\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js');\nvar iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments;\n  var current = null;\n  var i = -1;\n\n  /* eslint-disable no-constant-condition */\n  return new Iterator(function next() {\n    var step = null;\n\n    do {\n      if (current === null) {\n        i++;\n\n        if (i >= iterables.length) return {done: true};\n\n        current = iter(iterables[i]);\n      }\n\n      step = current.next();\n\n      if (step.done === true) {\n        current = null;\n        continue;\n      }\n\n      break;\n    } while (true);\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return new Iterator(function next() {\n    do {\n      if (!edgeData) {\n        if (i >= l) return {done: true};\n\n        const k = keys[i++];\n\n        if (k === avoid) {\n          edgeData = undefined;\n          continue;\n        }\n\n        edgeData = object[k];\n      } else {\n        edgeData = edgeData.next;\n      }\n    } while (!edgeData);\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return new Iterator(function () {\n      if (!edgeData) return {done: true};\n\n      const value = {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      };\n\n      edgeData = edgeData.next;\n\n      return {\n        done: false,\n        value\n      };\n    });\n  }\n\n  return Iterator.of({\n    edge: edgeData.key,\n    attributes: edgeData.attributes,\n    source: edgeData.source.key,\n    target: edgeData.target.key,\n    sourceAttributes: edgeData.source.attributes,\n    targetAttributes: edgeData.target.attributes,\n    undirected: edgeData.undirected\n  });\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    let neighborData = null;\n\n    do {\n      if (i >= l) {\n        if (visited) visited.wrap(object);\n        return {done: true};\n      }\n\n      const edgeData = object[keys[i++]];\n\n      const sourceData = edgeData.source;\n      const targetData = edgeData.target;\n\n      neighborData = sourceData === nodeData ? targetData : sourceData;\n\n      if (visited && visited.has(neighborData.key)) {\n        neighborData = null;\n        continue;\n      }\n    } while (neighborData === null);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops--;\n      graph._undirectedSelfLoopCount--;\n    }\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops--;\n      graph._directedSelfLoopCount--;\n    }\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.out.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.undirected.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return (\n        (typeof nodeData.out !== 'undefined' &&\n          nodeData.out.hasOwnProperty(target)) ||\n        (typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected.hasOwnProperty(target))\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n      loops += nodeData.directedLoops * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n"]},"metadata":{},"sourceType":"script"}