{"ast":null,"code":"/**\n * Graphology Common GEXF Helpers\n * ===============================\n *\n * Miscellaneous helpers used by both instance of the code.\n */\n\n/**\n * Function used to cast a string value to the desired type.\n *\n * @param  {string} type - Value type.\n * @param  {string} type - String value.\n * @return {any}         - Parsed type.\n */\nexports.cast = function (type, value) {\n  switch (type) {\n    case 'boolean':\n      value = value === 'true';\n      break;\n    case 'integer':\n    case 'long':\n    case 'float':\n    case 'double':\n      value = +value;\n      break;\n    case 'liststring':\n      value = value ? value.split('|') : [];\n      break;\n    default:\n  }\n  return value;\n};\n\n/**\n * Function deleting illegal characters from a potential tag name to avoid\n * generating invalid XML.\n *\n * @param  {string} type - Tag name.\n * @return {string}\n */\nvar SANITIZE_PATTERN = /[\"'<>&\\s]/g;\nexports.sanitizeTagName = function sanitizeTagName(tagName) {\n  return tagName.replace(SANITIZE_PATTERN, '').trim();\n};","map":{"version":3,"names":["exports","cast","type","value","split","SANITIZE_PATTERN","sanitizeTagName","tagName","replace","trim"],"sources":["/Users/declanbradley/Documents/GitHub/house-finance/node_modules/graphology-gexf/common/helpers.js"],"sourcesContent":["/**\n * Graphology Common GEXF Helpers\n * ===============================\n *\n * Miscellaneous helpers used by both instance of the code.\n */\n\n/**\n * Function used to cast a string value to the desired type.\n *\n * @param  {string} type - Value type.\n * @param  {string} type - String value.\n * @return {any}         - Parsed type.\n */\nexports.cast = function (type, value) {\n  switch (type) {\n    case 'boolean':\n      value = value === 'true';\n      break;\n\n    case 'integer':\n    case 'long':\n    case 'float':\n    case 'double':\n      value = +value;\n      break;\n\n    case 'liststring':\n      value = value ? value.split('|') : [];\n      break;\n\n    default:\n  }\n\n  return value;\n};\n\n/**\n * Function deleting illegal characters from a potential tag name to avoid\n * generating invalid XML.\n *\n * @param  {string} type - Tag name.\n * @return {string}\n */\nvar SANITIZE_PATTERN = /[\"'<>&\\s]/g;\n\nexports.sanitizeTagName = function sanitizeTagName(tagName) {\n  return tagName.replace(SANITIZE_PATTERN, '').trim();\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,IAAI,GAAG,UAAUC,IAAI,EAAEC,KAAK,EAAE;EACpC,QAAQD,IAAI;IACV,KAAK,SAAS;MACZC,KAAK,GAAGA,KAAK,KAAK,MAAM;MACxB;IAEF,KAAK,SAAS;IACd,KAAK,MAAM;IACX,KAAK,OAAO;IACZ,KAAK,QAAQ;MACXA,KAAK,GAAG,CAACA,KAAK;MACd;IAEF,KAAK,YAAY;MACfA,KAAK,GAAGA,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;MACrC;IAEF;EAAQ;EAGV,OAAOD,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAgB,GAAG,YAAY;AAEnCL,OAAO,CAACM,eAAe,GAAG,SAASA,eAAe,CAACC,OAAO,EAAE;EAC1D,OAAOA,OAAO,CAACC,OAAO,CAACH,gBAAgB,EAAE,EAAE,CAAC,CAACI,IAAI,EAAE;AACrD,CAAC"},"metadata":{},"sourceType":"script"}